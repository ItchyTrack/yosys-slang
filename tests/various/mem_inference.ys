design -reset
read_slang <<EOF
module top(input clk, input [7:0] a, input [7:0] data, output reg [7:0] q);
	reg [255:0] x[255:0];
	always @(posedge clk) begin
		q <= x[a];
		x[a] <= data;
	end
endmodule
EOF
memory_collect
select -assert-count 1 t:$mem_v2

design -reset
read_slang --no-implicit-memories <<EOF
module top(input clk, input [7:0] a, input [7:0] data, output reg [7:0] q);
	reg [255:0] x[255:0];
	always @(posedge clk) begin
		q <= x[a];
		x[a] <= data;
	end
endmodule
EOF
memory_collect
select -assert-none t:$mem_v2

design -reset
read_slang --no-implicit-memories <<EOF
module top(input clk, input [7:0] a, input [7:0] data, output reg [7:0] q);
	(* ram_block *)
	reg [255:0] x[255:0];
	always @(posedge clk) begin
		q <= x[a];
		x[a] <= data;
	end
endmodule
EOF
memory_collect
select -assert-count 1 t:$mem_v2

design -reset
read_slang <<EOF
module top(input clk, input [7:0] a, input [7:0] data, output reg [7:0] q, input [7:0] data2);
	reg [255:0] x[5:0];
	always @(posedge clk) begin
		q <= x[a];
		x[5] <= data;
	end

	always_comb begin
		x[0] = data2;
	end
endmodule
EOF
memory_collect
select -assert-none t:$mem_v2
